<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <title>‚ö†Ô∏è WebSocket Bucle Infinito</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/handsontable@8.4.0/dist/handsontable.full.min.css">
    <style>
        body { font-family: sans-serif; padding: 20px; }
        #log { border: 1px solid #ccc; padding: 10px; height: 200px; overflow-y: auto; background: #f8f8f8; margin-top: 20px; }
        .peligro { color: red; font-weight: bold; }
    </style>
</head>
<body>

    <h2>‚ö†Ô∏è Test WebSocket con Bucle Infinito</h2>
    <p class="peligro">Este ejemplo NO tiene protecci√≥n contra bucles. Refresca la p√°gina si se bloquea.</p>

    <div id="tabla" style="width: 600px; height: 300px;"></div>
    <div id="log"></div>

    <script src="https://cdn.jsdelivr.net/npm/handsontable@8.4.0/dist/handsontable.full.min.js"></script>
    <script>
        var socket = new WebSocket("wss://socket.ahjende.com/wss/?encoding=text");

        function log(mensaje) {
            var t = new Date().toLocaleTimeString();
            var logDiv = document.getElementById("log");
            logDiv.innerHTML += "<p>[" + t + "] " + mensaje + "</p>";
            logDiv.scrollTop = logDiv.scrollHeight;
        }

        var datos = [
            [1, "Juan P√©rez", "555-1234"],
            [2, "Mar√≠a Garc√≠a", "555-5678"]
        ];

        var container = document.getElementById("tabla");
        var hot = new Handsontable(container, {
            data: datos,
            colHeaders: ["ID", "Nombre", "Tel√©fono"],
            columns: [
                { readOnly: true },
                { type: "text" },
                { type: "text" }
            ],
            licenseKey: "non-commercial-and-evaluation",
            afterChange: function(changes, source) {
                log("üìù afterChange (source=" + source + ")");
                // ‚ùå Este ejemplo NO ignora mensajes WebSocket (causa bucle)
                if (source !== "loadData") {
                    changes.forEach(function(change) {
                        var row = change[0];
                        var col = change[1];
                        var oldVal = change[2];
                        var newVal = change[3];

                        var id_cit = hot.getDataAtCell(row, 0);
                        var campo = col === 1 ? "nom_cit" : "tel_cit";

                        var mensaje = {
                            tipo: "cita_actualizada",
                            id_cit: id_cit,
                            campo: campo,
                            valor: newVal,
                            id_ejecutivo: 1 // fijo
                        };

                        socket.send(JSON.stringify(mensaje));
                        log("üì§ Enviado: " + JSON.stringify(mensaje));
                    });
                }
            }
        });

        socket.onopen = function() {
            log("‚úÖ Conectado al WebSocket");
        };

        socket.onmessage = function(event) {
            var mensaje = JSON.parse(event.data);
            log("üì® Recibido: " + JSON.stringify(mensaje));

            if (mensaje.tipo === "cita_actualizada") {
                var filas = hot.getData();
                for (var i = 0; i < filas.length; i++) {
                    if (filas[i][0] == mensaje.id_cit) {
                        var col = mensaje.campo === "nom_cit" ? 1 : 2;
                        log("üîÑ Actualizando fila " + i + " columna " + col + " con: " + mensaje.valor);

                        // ‚ùå Aqu√≠ se actualiza SIN source = 'websocket', lo que vuelve a disparar afterChange
                        hot.setDataAtCell(i, col, mensaje.valor);

                        break;
                    }
                }
            }
        };

        socket.onerror = function(error) {
            log("‚ùå Error WebSocket: " + error);
        };

        socket.onclose = function() {
            log("üî¥ WebSocket desconectado");
        };
    </script>
</body>
</html>
